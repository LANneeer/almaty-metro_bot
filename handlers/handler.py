from loader import dp, db, bot
from aiogram.types import Message
from aiogram.dispatcher.filters.builtin import CommandStart, CommandHelp
from aiogram.utils.exceptions import MessageToDeleteNotFound
from misc.parse import info_station
from misc.keyboard import selection
from misc.dynamic_keyboard import DynamicButtons


@dp.message_handler(CommandStart())
async def start_send(message: Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n'
                         '–≠—Ç–æ –±–æ—Ç –¥–ª—è –ê–ª–º–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –º–µ—Ç—Ä–æ–ø–æ–ª–∏—Ç–µ–Ω–∞!\n'
                         '<i>–Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —è –Ω–∏–∫–æ–≥–¥–∞ –≤ –∂–∏–∑–Ω–∏ –Ω–µ –µ–∑–¥–∏–ª :(</i>\n\n'
                         '–¢—É—Ç –≤—ã —Ç–∞–∫-–∂–µ –º–æ–∂–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å–µ–±—è :3',
                         reply_markup=selection)
    if await db.exist_user(message.from_user.id) is False:
        await db.add_user(message.from_user.id)
    try:
        await bot.delete_message(message.from_user.id, message_id=message.message_id-1)
    except MessageToDeleteNotFound:
        pass
    await message.delete()


@dp.message_handler(CommandHelp())
async def help_send(message: Message):
    await message.answer('–ê–≤—Ç–æ—Äü§°: @salvatttt', reply_markup=selection)
    if await db.exist_user(message.from_user.id) is False:
        await db.add_user(message.from_user.id)
    try:
        await bot.delete_message(message.from_user.id, message_id=message.message_id-1)
    except MessageToDeleteNotFound:
        pass
    await message.delete()


@dp.message_handler(text_contains='/')
async def choice_station(message: Message):
    message_text = message.text.replace('/', '')
    await message.delete()
    schedules = await info_station(message_text)
    testing = ['Load.']
    await message.answer(text=schedules, reply_markup=DynamicButtons(text=testing, callback=['time']).inline)

